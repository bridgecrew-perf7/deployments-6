---
- name: Add decommission nodes to hdfs-exclude file
  template:
    src: ../hadoop/templates/dfs.hosts.exclude.j2
    dest: "{{ hadoop_conf_dir }}/dfs.hosts.exclude"
    owner: "{{hadoop_user}}"
    group: "{{hadoop_group}}"

- name: Add decommission nodes to yarn-exclude file
  template:
    src: ../hadoop/templates/yarn.hosts.exclude.j2
    dest: "{{ hadoop_conf_dir }}/yarn.hosts.exclude"
    owner: "{{hadoop_user}}"
    group: "{{hadoop_group}}"

- name: Refresh yarn node
  command: bash -lc "./yarn rmadmin -refreshNodes"
  args:
    chdir: "{{ hadoop_bin_dir }}"
  become: true
  become_user: "{{hadoop_user}}"
  when:
    - inventory_hostname == hadoop_resourcemanagers[0] and hadoop_yarn_hosts_exclude is defined

- name: Refresh namenode
  command: bash -lc "./hdfs dfsadmin -refreshNodes"
  args:
    chdir: "{{ hadoop_bin_dir }}"
  become: true
  become_user: "{{hadoop_user}}"
  when: inventory_hostname == hadoop_namenodes[0] and hadoop_dfs_hosts_exclude is defined

- name: Check the HDFS status of the decommissioning
  command: bash -lc "./hdfs dfsadmin -report"
  args:
    chdir: "{{ hadoop_bin_dir }}"
  become: true
  become_user: "{{hadoop_user}}"
  register: decommission_result
  when: inventory_hostname == hadoop_namenodes[0]

- name: Output from decommissioning
  debug:
    msg: "{{ decommission_result.stdout_lines }}"
  when: inventory_hostname == hadoop_namenodes[0]

- name: Stop yarn-nodemanager
  service: name=yarn-nodemanager state=stopped
  when:
    - inventory_hostname in groups.yarn_decommision_nodes
    - hadoop_ansible_handlers|bool

- name: Stop hadoop-datanode
  service: name=hdfs-datanode state=stopped
  when:
    - inventory_hostname in groups.dfs_decommision_nodes
    - hadoop_ansible_handlers|bool