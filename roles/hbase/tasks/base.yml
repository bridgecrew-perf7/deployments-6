---
- name: Create {{hbase_install_dir}}
  file:
    path: "{{hbase_install_dir}}"
    state: directory
    owner: "{{hbase_user}}"
    group: "{{hadoop_group}}"
  when: inventory_hostname in hbase_hosts

- name: Download hbase .tgz to {{datalandfill_root_dir}}
  get_url:
    url: "{{hbase_download_url}}"
    dest: "{{datalandfill_root_dir}}/hbase-{{hbase_version}}-bin.tar.gz"
    validate_certs: no
  when: inventory_hostname in hbase_hosts

- name: Unarchive downloaded hbase
  unarchive:
    src: "{{datalandfill_root_dir}}/hbase-{{hbase_version}}-bin.tar.gz"
    dest: "{{hbase_install_dir}}"
    owner: "{{hbase_user}}"
    group: "{{hadoop_group}}"
    remote_src: yes
    mode: 0755
    extra_opts: [--strip-components=1]
  when: inventory_hostname in hbase_hosts

- name: Remove {{datalandfill_root_dir}}/hbase-{{hbase_version}}-bin.tar.gz
  file:
    path: "{{datalandfill_root_dir}}/hbase-{{hbase_version}}-bin.tar.gz"
    state: absent
  when: inventory_hostname in hbase_hosts

- name: Create folder /etc/hbase
  file:
    path: /etc/hbase
    state: directory
    owner: "{{hbase_user}}"
    group: "{{hadoop_group}}"
  when: inventory_hostname in hbase_hosts

- name: Create hbase link for conf to /etc/hbase
  file:
    src: "{{hbase_conf_dir}}"
    dest: /etc/hbase/conf
    owner: "{{hbase_user}}"
    group: "{{hadoop_group}}"
    state: link
  when: inventory_hostname in hbase_hosts

- name: Create link for {{item}} to /usr/local/bin
  file:
    src: "{{hbase_bin_dir}}/{{item}}"
    dest: "/usr/local/bin/{{item}}"
    owner: "{{hbase_user}}"
    group: "{{hadoop_group}}"
    mode: 0755
    state: link
  when: inventory_hostname in hbase_hosts
  with_items:
    - hbase
    - hbase-config.sh

- name: Create link for hadoop core-site.xml to hbase conf
  file:
    src: "{{hadoop_conf_dir}}/core-site.xml"
    dest: "{{hbase_conf_dir}}/core-site.xml"
    owner: "{{hbase_user}}"
    group: "{{hadoop_group}}"
    mode: 0755
    state: link
  when: inventory_hostname in hbase_hosts

# - name: Export hbase variables
#   copy:
#     content: "export HADOOP_HOME={{hadoop_install_dir}}\nexport HADOOP_CONF_DIR={{hadoop_conf_dir}}\nexport HADOOP_LIBEXEC_DIR={{hadoop_install_dir}}/libexec\nexport HADOOP_CLASSPATH=`/usr/local/bin/hadoop classpath`\nexport JAVA_HOME={{datalandfill_java_home}}\nexport PATH=$PATH:$JAVA_HOME/bin\nexport hbase_HOME={{hbase_install_dir}}\nexport LD_LIBRARY_PATH={{hbase_install_dir}}/lib/native:$LD_LIBRARY_PATH"
#     dest: "/etc/profile.d/hbase_exports.sh"
#     mode: 0755
#   when: inventory_hostname in hbase_hosts

- name: Allow hbase variables keeping for sudoers
  template:
    src: hbase_sudoers.j2
    dest: /etc/sudoers.d/hbase
    owner: root
    group: root
    mode: 0644
  when: inventory_hostname in hbase_hosts

- name: Create hbase tmp dir
  file:
    path: "{{hbase_tmp_dir}}"
    state: directory
    owner: "{{hbase_user}}"
    group: "{{hadoop_group}}"
    mode: 1777
  tags:
    - skip_ansible_lint
  when: inventory_hostname in hbase_hosts

- name: Create hbase log dir
  file:
    path: "{{hbase_log_dir}}"
    state: directory
    owner: "{{hbase_user}}"
    group: "{{hadoop_group}}"
    mode: 0755
  when: inventory_hostname in hbase_hosts

# - name: Create hbase applicationHistory dir on hdfs
#   shell: 'su - {{hadoop_user}} -c "hdfs dfs -mkdir -p /user/{{hbase_user}}"'
#   when: inventory_hostname in hadoop_namenodes[0]

# - name: Change owner {{hbase_user}} work dir on hdfs
#   shell: 'su - {{hadoop_user}} -c "hdfs dfs -chown -R {{hbase_user}}:{{hadoop_group}} /user/{{hbase_user}}"'
#   when: inventory_hostname in hadoop_namenodes[0]

# - name: Change mode {{hbase_user}} work dir on hdfs
#   shell: 'su - {{hadoop_user}} -c "hdfs dfs -chmod -R 775 /user/{{hbase_user}}"'
#   when: inventory_hostname in hadoop_namenodes[0]

# - name: Check {{hbase_user}} work dir on hdfs
#   shell: 'su - {{hadoop_user}} -c "hdfs dfs -ls -h /user/{{hbase_user}}"'
#   when: inventory_hostname in hadoop_namenodes[0]
#   register: hbase_permission

# - name: print permission
#   debug: msg={{hbase_permission.stdout}}
#   when: inventory_hostname in hadoop_namenodes[0]