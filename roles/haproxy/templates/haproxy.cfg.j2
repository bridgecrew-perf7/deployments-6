global
    log 127.0.0.1 local0
    maxconn 32000
    user root
    group root
    stats timeout 30s
    tune.ssl.default-dh-param 2048
    ssl-default-bind-options ssl-min-ver TLSv1.0
    ssl-server-verify none
    tune.ssl.cachesize 100000
    tune.ssl.lifetime 600
    #Support TLS1.0-TLS1.3
    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA256:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
    daemon

defaults
    log global
    option http-server-close
    log stdout local0
    log fd@1 local0
    log stdout format raw local0
    retries 3
    option redispatch
    #http-reuse always
    timeout http-request 10s
    timeout connect 5s
    timeout server 15m
    timeout client 15m
    timeout http-keep-alive 30s

frontend redis_superset
    bind 0.0.0.0:{{haproxy_redis_ha_port}}
    mode tcp
    option tcplog
    log-format 'frontend_name=%f,backend_name=%b sc=%sc,sq=%sq,bytes_read=%B,client_ip="%ci",client_port=%cp,Tc=%Tc,Tt=%Tt,Tw=%Tw,reqhead="%hr",resphead="%hs" %Ts'
    use_backend redis_superset_be

# redis sentinel backend
backend redis_superset_be
    mode tcp
    balance first
    option tcp-check
    tcp-check connect
    {% if redis_requirepass is true %}
    tcp-check send AUTH\ {{redis_vault_password}}\r\n
    {% endif %}
    tcp-check send PING\r\n
    tcp-check expect string +PONG
    tcp-check send info\ replication\r\n
    tcp-check expect string role:master
    tcp-check send QUIT\r\n
    tcp-check expect string +OK
    {% for host in groups.redis_nodes %}
    server {{hostvars[host]['ansible_host']}} {{hostvars[host]['ansible_host']}}:6379 check inter 1s
    {% endfor %}

frontend trino_coordinator
    bind 0.0.0.0:{{haproxy_trino_webserver_ha_port}}
    mode http
    option httplog
    log-format 'frontend_name=%f,frontend_ip=%fi,frontend_port=%fp,server_name=%s,hostname=%H,backend_source_ip=%bi,backend_source_port=%bp,backend_name=%b,client_ip="%ci" accept_date=%ms,sq=%sq,status_code=%ST,bytes_read=%B,client_port=%cp,id="%ID",Tc=%Tc,Tq=%Tq,Tr=%Tr,Tt=%Tt,Tw=%Tw,reqhead="%hr",srv_conn=%sc %Ts,request_url=%{+Q}r'
    use_backend trino_coordinator_be

backend trino_coordinator_be
    balance leastconn
    mode    http
    timeout server 600s
    option  httpclose
    option  forwardfor header X-Real-IP
{% for host in groups.trino_coordinator %}
    {% if host in groups.trino_coordinator[0] %}
    server {{hostvars[host]['ansible_host']}} {{hostvars[host]['ansible_host']}}:{{trino_webserver_port}} check inter 1s
    {% else %}
    server {{hostvars[host]['ansible_host']}} {{hostvars[host]['ansible_host']}}:{{trino_webserver_port}} check inter 1s backup
    {% endif %}
{% endfor %}

frontend hive_thrift_fe
    bind 0.0.0.0:{{hive_thrift_ha_port}}
    mode tcp
    option tcplog
    log-format 'frontend_name=%f,backend_name=%b sc=%sc,sq=%sq,bytes_read=%B,client_ip="%ci",client_port=%cp,Tc=%Tc,Tt=%Tt,Tw=%Tw,reqhead="%hr",resphead="%hs" %Ts'
    use_backend hive_thrift_be

backend hive_thrift_be
    balance leastconn
    mode    tcp
    timeout server 600s
{% for host in groups.hive_nodes %}
    server {{hostvars[host]['ansible_host']}} {{hostvars[host]['ansible_host']}}:9083 check inter 1s
{% endfor %}

frontend elasticsearch
    bind 0.0.0.0:{{haproxy_es_ha_port}}
    mode tcp
    option tcplog
    log-format 'frontend_name=%f,backend_name=%b sc=%sc,sq=%sq,bytes_read=%B,client_ip="%ci",client_port=%cp,Tc=%Tc,Tt=%Tt,Tw=%Tw,reqhead="%hr",resphead="%hs" %Ts'
    use_backend elasticsearch_be

backend elasticsearch_be
    balance leastconn
    mode    tcp
    timeout server 600s
{% for host in groups.es_master %}
    server {{hostvars[host]['ansible_host']}} {{hostvars[host]['ansible_host']}}:9200 check inter 1s
{% endfor %}

frontend superset
    bind 0.0.0.0:{{haproxy_superset_ha_port}}
    mode tcp
    option tcplog
    log-format 'frontend_name=%f,backend_name=%b sc=%sc,sq=%sq,bytes_read=%B,client_ip="%ci",client_port=%cp,Tc=%Tc,Tt=%Tt,Tw=%Tw,reqhead="%hr",resphead="%hs" %Ts'
    use_backend superset_be

backend superset_be
    balance leastconn
    mode    tcp
    timeout server 600s
{% for host in groups.superset_frontend %}
    server {{hostvars[host]['ansible_host']}} {{hostvars[host]['ansible_host']}}:{{superset_webserver_port}} check inter 1s
{% endfor %}

frontend resourcemanager
    bind 0.0.0.0:{{haproxy_resourcemanager_ha_port}}
    mode tcp
    option tcplog
    log-format 'frontend_name=%f,backend_name=%b sc=%sc,sq=%sq,bytes_read=%B,client_ip="%ci",client_port=%cp,Tc=%Tc,Tt=%Tt,Tw=%Tw,reqhead="%hr",resphead="%hs" %Ts'
    use_backend resourcemanager_be

backend resourcemanager_be
    balance leastconn
    mode    tcp
    timeout server 600s
{% for host in groups.resourcemanager_node %}
    server {{hostvars[host]['ansible_host']}} {{hostvars[host]['ansible_host']}}:{{resource_manager_port}} check inter 1s
{% endfor %}

listen stats
    bind 0.0.0.0:8382
    mode http
    stats enable
    stats hide-version
    stats realm HAproxy-Statistics
    stats auth {{haproxy_user}}:{{haproxy_pass}}
    stats uri {{haproxy_uri}}
