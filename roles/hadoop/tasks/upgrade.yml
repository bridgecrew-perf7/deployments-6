---
- block:
    - name: End play if not HA mode
      debug:
        msg: "Nothing to upgrade, ending play. This installation is not HA mode. No support for single instance."
    - meta: end_play
  when: hadoop_namenodes | length != 2

- name: Check current version
  shell: "./hdfs version 2> /dev/null | grep ^Hadoop | cut -c8-"
  args:
    chdir: "{{ hadoop_bin_dir }}"
  become: yes
  become_user: "{{ hadoop_user }}"
  register: current_hadoop_version
  changed_when: False

- debug:
    msg: "Current HDFS version is: {{ current_hadoop_version.stdout }}"
    verbosity: 1

- block:
    - name: End play if nothing to upgrade
      debug:
        msg: "Nothing to upgrade, ending play. Current version is >= than upgrading version."
    - meta: end_play
  when:
    - current_hadoop_version.stdout | version_compare(hadoop_version, '>=')
    - not hadoop_upgrade_force

- name: Set if should upgrade HDFS
  set_fact:
    hadoop_uptodate: "{{ current_hadoop_version.stdout | version_compare(hadoop_version, '>=') }}"

- name: Should upgrade hdfs
  debug:
    msg: "Variable is {{ hadoop_uptodate }}"
    verbosity: 2

- name: Prepare HDFS upgrade (create an fsimage for rollback)
  command: "./hdfs dfsadmin -rollingUpgrade prepare"
  args:
    chdir: "{{ hadoop_bin_dir }}"
  become: yes
  become_user: "{{ hadoop_user }}"
  when:
    - inventory_hostname == hadoop_namenodes[0]
    - not hadoop_uptodate

- name: Check HDFS upgrade preparation (retry for 10 minutes)
  command: "./hdfs dfsadmin -rollingUpgrade query"
  args:
    chdir: "{{ hadoop_bin_dir }}"
  register: result
  become: yes
  become_user: "{{ hadoop_user }}"
  until: result.stdout.find("Proceed with rolling upgrade") != -1
  retries: 72
  delay: 10
  when:
    - inventory_hostname == hadoop_namenodes[0]
    - not hadoop_uptodate

- name: Failover namenode "{{ hadoop_namenodes[0] }}" to "{{ hadoop_namenodes[1] }} if HA mode"
  command: "./hdfs haadmin -failover {{ hadoop_namenodes[0] }} {{ hadoop_namenodes[1] }}"
  args:
    chdir: "{{ hadoop_bin_dir }}"
  become: yes
  become_user: "{{ hadoop_user }}"
  when:
    - inventory_hostname == hadoop_namenodes[0]
    - hadoop_ha_enabled
    - not hadoop_uptodate

- name: Upgrade namenode "{{ hadoop_namenodes[0] }}"
  include_tasks: upgrade_namenode.yml
  loop_control:
    loop_var: hadoop_namenode
  with_items:
    - "{{ hadoop_namenodes[0] }}"

- name: Ask for confirmation if namenode is up
  pause:
    prompt: "Make sure namenode service on {{ hadoop_namenodes[0] }} is FULLY up! Check the startup progress on the web GUI."
  run_once: true
  delegate_to: hadoop_namenodes[0]
  when:
    - not hadoop_uptodate

- name: Ask for confirmation if safe mode is off
  pause:
    prompt: "Make sure SAFE MODE is OFF. You might have to wait a couple of seconds (usually 30 seconds). Follow the progress on the web GUI."
  run_once: true
  delegate_to: hadoop_namenodes[0]
  when:
    - not hadoop_uptodate

- name: HDFS namenode on "{{ hadoop_namenodes[0] }}" is running
  command: "./hdfs haadmin -checkHealth {{ hadoop_namenodes[0] }}"
  args:
    chdir: "{{ hadoop_bin_dir }}"
  become: yes
  become_user: "{{ hadoop_user }}"
  any_errors_fatal: true
  when:
    - inventory_hostname == hadoop_namenodes[0]
    - not hadoop_uptodate

- name: Failover namenode "{{ hadoop_namenodes[1] }}" to "{{ hadoop_namenodes[0] }} if HA mode"
  command: "./hdfs haadmin -failover {{ hadoop_namenodes[1] }} {{ hadoop_namenodes[0] }}"
  args:
    chdir: "{{ hadoop_bin_dir }}"
  become: yes
  become_user: "{{ hadoop_user }}"
  when:
    - inventory_hostname == hadoop_namenodes[1]
    - hadoop_ha_enabled

- name: Upgrade namenode "{{ hadoop_namenodes[1] }}"
  include_tasks: upgrade_namenode.yml
  with_items:
    - "{{ hadoop_namenodes[1] }}"
  loop_control:
    loop_var: hadoop_namenode
  when:
    - not hadoop_uptodate

- name: Ask for confirmation if namenode is up
  pause:
    prompt: "Make sure namenode service on {{ hadoop_namenodes[1] }} is FULLY up! Check the startup progress on the web GUI."
  run_once: true
  delegate_to: hadoop_namenodes[1]
  when:
    - not hadoop_uptodate

- name: Ask for confirmation if safe mode is off
  pause:
    prompt: "Make sure SAFE MODE is OFF. You might have to wait a couple of seconds (usually 30 seconds). Follow the progress on the web GUI."
  run_once: true
  delegate_to: hadoop_namenodes[1]
  when:
    - not hadoop_uptodate

- name: Upgrade datanodes
  include_tasks: upgrade_datanode.yml
  with_items:
    - "{{ hadoop_datanodes }}"
  loop_control:
    loop_var: hadoop_datanode

- name: Upgrade journalnodes
  include_tasks: upgrade_journalnode.yml
  with_items:
    - "{{ hadoop_journalnodes }}"
  loop_control:
    loop_var: hadoop_journalnode

- name: Finalize HDFS upgrade
  command: "./hdfs dfsadmin -rollingUpgrade finalize"
  args:
    chdir: "{{ hadoop_bin_dir }}"
  become: yes
  become_user: "{{ hadoop_user }}"
  when: inventory_hostname == hadoop_namenodes[0]
