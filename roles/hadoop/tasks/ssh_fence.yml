---
#### only for ssh fence
- name: Check if ssh keys should be distributed
  stat:
    path: "{{ hadoop_ssh_known_hosts_file }}"
  register: host_file_status

- name: Set distribute keys variable
  set_fact:
    distribute_keys: "{{not host_file_status.stat.exists or hadoop_redistribute_ssh_keys or created_user.changed}}"

- name: Fetch private key
  fetch:
    src: "{{ hadoop_user_home }}/.ssh/id_rsa"
    dest: rsa_key
  when: inventory_hostname == groups['hadoop_master_node'][0] and distribute_keys
  check_mode: no

- name: Fetch public key
  fetch:
    src: "{{ hadoop_user_home }}/.ssh/id_rsa.pub"
    dest: rsa_key
  when: inventory_hostname == groups['hadoop_master_node'][0] and distribute_keys
  check_mode: no

- name: Create .ssh directory for {{hadoop_user}}
  file:
    path: "{{ hadoop_user_home }}/.ssh"
    state: directory
    owner: "{{hadoop_user}}"
    group: "{{hadoop_group}}"
    mode: 0700
  when: distribute_keys

- name: Copy private key to all machines
  copy:
    src: "rsa_key/{{groups['hadoop_master_node'][0]}}/{{ hadoop_user_home }}/.ssh/id_rsa"
    dest: "{{ hadoop_user_home }}/.ssh/id_rsa"
    owner: "{{hadoop_user}}"
    group: "{{hadoop_group}}"
    mode: 0600
  when: distribute_keys

- name: Add pubkeys to master server
  authorized_key:
    user: "{{hadoop_user}}"
    key: "{{ lookup('file', 'rsa_key/{{hadoop_namenodes[0]}}/{{ hadoop_user_home }}/.ssh/id_rsa.pub') }}"
  when: distribute_keys

- name: Make sure the known hosts file exists
  file:
    path: "{{ hadoop_ssh_known_hosts_file }}"
    state: touch
    owner: "{{hadoop_user}}"
    group: "{{hadoop_group}}"
    mode: 0644
  when: (not host_file_status.stat.exists) or (distribute_keys and host_file_status.stat.mode == "0644")
  changed_when: (not host_file_status.stat.exists) or host_file_status.stat.mode != "0644"

- set_fact: hadoop_namenodes_long={{ hadoop_namenodes }}

- name: Add long names to namenodes for proper key deployment
  set_fact: hadoop_namenodes_long={{ hadoop_namenodes_long | map('regex_replace', '(.*)', '\\1.' + hadoop_host_domain_name ) | list}}
  when: hadoop_host_domain_name is defined

- name: Check host name availability
  shell: "ssh-keygen -f {{ hadoop_ssh_known_hosts_file }} -F {{ item }}"
  with_items: "{{ hadoop_namenodes_long }}"
  when: distribute_keys
  register: ssh_known_host_results
  ignore_errors: yes
  changed_when: False
  tags:
    - skip_ansible_lint

- name: Scan the public key
  shell: "ssh-keyscan -H -T 10 {{ item.item }} >> {{ hadoop_ssh_known_hosts_file }}"
  with_items: "{{ ssh_known_host_results.results }}"
  when: item.stdout is defined and item.stdout == ""
  no_log: True

- name: Delete key locally
  local_action: file path=rsa_key state=absent
  when: inventory_hostname == groups['hadoop_master_node'][0] and distribute_keys
  become: no
